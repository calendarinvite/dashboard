AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: get_event_attendee_report

Metadata:
  AWS::ServerlessRepo::Application:
    Name: get-event-attendee-report
    Description: API application for the get_event_attendee_report SAM app.
    Author: 31events
    # SpdxLicenseId: N/A
    # LicenseUrl: LICENSE.txt
    ReadmeUrl: ../README.md
    # SemanticVersion is ignored by the SAM publisher CodeBuild
    # instead version comes from the Git tag that triggers the CodeBuild.
    SemanticVersion: 0.0.1

  cfn-lint:
    config:
      ignore_checks:
        - W3002 # Because we're using Lambda Layers

Parameters:
  ############
  # Required #
  ############
  DynamoDbTableName:
    Type: String
    Description: Name of DynamoDb table to write to/read from.

  AttendeeReportEmailTemplateFileName:
    Type: String
    Description: File name of attendee report email template.

  CodeCommitRepoName:
    Type: String
    Description: CodeCommit repo name to pull templates from.

  LocalCsvFileLocation:
    Type: String
    Description: Location of csv file in local directory.

  EmailSender:
    Type: String
    Description: Name and email of sender.

  EmailSubject:
    Type: String
    Description: Subject of email.

  LayerVersionArn:
    Type: String
    Description: SharedLib Lambda Layer version ARN.

  ############
  # Optional #
  ############
  LogLevel:
    Type: String
    Description: Log level for lambda.
    Default: WARNING

  Environment:
    Type: String
    Description: Environment to deploy SAM App to. For example, dev or prod.
    AllowedValues:
      - dev
      - prod
    Default: dev

  LogRetentionDays:
    Type: String
    Description: Number of days to retin logs before expiring them.
    AllowedValues:
      - "-1"
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
    Default: 180

Conditions:
  LogRetentionIsSet: !Not [!Equals [!Ref LogRetentionDays, "-1"]]

Resources:
  GetEventAttendeeReportFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/functions/get_event_attendee_report/
      Handler: app.lambda_handler
      Runtime: python3.8
      Role: !GetAtt GetEventAttendeeReportFunctionRole.Arn
      Timeout: 10 # TODO: Reduce this to 3s when this function can consistently achieve it.
      MemorySize: 1024
      Layers:
        - !Ref LayerVersionArn
      Environment:
        Variables:
          LOG_LEVEL: !Ref LogLevel
          ATTENDEE_REPORT_EMAIL: !Ref AttendeeReportEmailTemplateFileName
          DYNAMODB_TABLE: !Ref DynamoDbTableName
          CODECOMMIT_REPO: !Ref CodeCommitRepoName
          LOCAL_CSV_FILE: !Ref LocalCsvFileLocation
          REGION: !Ref AWS::Region
          SENDER: !Ref EmailSender
          SUBJECT: !Ref EmailSubject

  GetEventAttendeeReportFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: inline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CloudWatch
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Sid: DynamoDb
                Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:GetItem
                  - dynamodb:Query
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDbTableName}
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDbTableName}/index/*
              - Sid: Ses
                Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendTemplatedEmail
                  - ses:SendCustomVerificationEmail
                  - ses:SendRawEmail
                  - ses:SendBulkTemplatedEmail
                Resource: "*"
              - Sid: CodeCommit
                Effect: Allow
                Action: codecommit:GetFile
                Resource: !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepoName}

  GetEventAttendeeReportLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetEventAttendeeReportFunction}"
      RetentionInDays: !If
        - LogRetentionIsSet
        - !Ref LogRetentionDays
        - !Ref AWS::NoValue

Outputs:
  ##################################
  # GetEventAttendeeReportFunction #
  ##################################

  GetEventAttendeeReportFunction:
    Description: "GetEventAttendeeReport Lambda Function ARN"
    Value: !GetAtt GetEventAttendeeReportFunction.Arn

  GetEventAttendeeReportFunctionRole:
    Description: "IAM Role for the GetEventAttendeeReport function"
    Value: !GetAtt GetEventAttendeeReportFunctionRole.Arn

  GetEventAttendeeReportLogGroup:
    Description: "Log Group for the GetEventAttendeeReport function."
    Value: !Ref GetEventAttendeeReportLogGroup
